<script method='OnPreHTTP' language='cache' runat='server' returntype='%Boolean'>
	set url = $Piece($Get(%request.CgiEnvs("REQUEST_URI"),$Get(%request.CgiEnvs("HTTP_URL"))),"?")
	set pagePath = $Piece(url,..#CSPURL,2,*)
    set namespace = $Piece(pagePath,"/",2)
    set internalName = $ZConvert($Piece(pagePath,"/",3),"I","URL")
    set resource = $Piece(pagePath,"/",4,*)
    set %base = $Piece(url,..#CSPURL,1)_..#CSPURL_"/"_namespace_"/"_$ZConvert(internalName,"O","URL")_"/"

    new $NAMESPACE
    set $NAMESPACE = namespace
	set %namespace = namespace
	
	try {
		if (%request.UserAgent [ " Code/") {
			// Workaround for VSCode webview
			set %session.SessionScope = 0 // none; allowed because...
			set %session.SecureSessionCookie = 1 // secure flag on session cookie - will be ignored over http, but that's OK because we already have it
		}
	} catch e {
		// ignore; may occur on platform versions without the above properties
	}

	// Serve static content when appropriate.
	// index.html
	if (url = %base) || (url = $Extract(%base,1,*-1)) {
		do %request.Set("FILE","/isc/studio/usertemplates/gitsourcecontrol/index.html")
		set %stream = 1
		quit 1
	}
	// other static resources
    if $Match(url,"^(.*/img/.*|.*\.(js|map|html|css|woff|woff2))$") {
		do %request.Set("FILE","/isc/studio/usertemplates/gitsourcecontrol/"_$Piece(url,%base,2,*))
		kill %base
		set %stream = 1
		do ##class(%CSP.StreamServer).FileClassify($Piece(url,".",*),.type,,.charset)
		set %response.ContentType = type
		if ($Get(charset) = "") {
			set %response.NoCharSetConvert = 1
		}
		quit 1
    }

	// Handles HTTP requests to /api/ (everything new) plus things previously sent to the Python backend
	do ##class(SourceControl.Git.WebUIDriver).HandleRequest("/"_resource, internalName, .handled, .%data)
	if handled {
		kill %base
		quit 1
	}

	set %data = ##class(%Stream.TmpCharacter).%New()
	do %data.WriteLine("<h1>Bad Request.</h1>")

	quit 1
</script><server>
    new $NAMESPACE
	set $NAMESPACE = %namespace
	if $Get(%stream) {
		Quit ##class(SourceControl.Git.StreamServer).Page()
	} elseif $IsObject($Get(%data)) {
        do %data.OutputToDevice()
    }
    quit 1
</server>