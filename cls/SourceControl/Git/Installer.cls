/// Mostly used from SourceControl.Git.API:MapEverywhere
Class SourceControl.Git.Installer
{

ClassMethod MapEverywhere() As %Status
{
    set sc = $$$OK
    try {
        set ns = $namespace
        set locDBDir = ##class(%SYS.Namespace).GetGlobalDest(ns,$Name(^IRIS.Msg("Studio")))
        set vars("LocalizationDB") = ..DatabaseDirToName(locDBDir)
        set codeDBDir = ##class(%SYS.Namespace).GetPackageDest(ns,"SourceControl.Git")
        set vars("RoutineDB") = ..DatabaseDirToName(codeDBDir)
        $$$ThrowOnError(..RunMapEverywhere(.vars))
    } catch e {
        set sc = e.AsStatus()
        if '$quit {
            write !,$System.Status.GetErrorText(sc)
        }
    }
    quit sc
}

ClassMethod DatabaseDirToName(dbDir As %String) As %String [ Private ]
{
    New $Namespace
    Set $Namespace = "%SYS"
    Set tSC = ##class(Config.Databases).DatabasesByDirectory($Piece(dbDir,"^"),$Piece(dbDir,"^",2),.tDBList)
    $$$ThrowOnError(tSC)
    If ($ListLength(tDBList) '= 1) {
        // This is highly unexpected, but worth checking for anyway.
        $$$ThrowStatus($$$ERROR($$$GeneralError,$$$FormatText("Could not find database name for '%1'",tDBDir)))
    }
    $$$ThrowOnError(tSC)
    Quit $ListGet(tDBList)
}

/// This is a method generator whose code is generated by XGL.
ClassMethod RunMapEverywhere(ByRef pVars, pLogLevel As %Integer = 3, pInstaller As %Installer.Installer, pLogger As %Installer.AbstractLogger) As %Status [ CodeMode = objectgenerator, Internal, Private ]
{
	quit ##class(%Installer.Manifest).%Generate(%compiledclass, %code, "MapEverywhere")
}

XData MapEverywhere [ XMLNamespace = INSTALLER ]
{
<Manifest>
<Namespace Name="%ALL" Create="yes" Ensemble="no" Code="%DEFAULTDB" Data="%DEFAULTDB">
<Configuration>
<GlobalMapping Global="IRIS.Msg" From="%DEFAULTDB" />
<GlobalMapping Global="IRIS.Msg(&quot;Studio&quot;)" From="${LocalizationDB}" />
<ClassMapping Package="SourceControl.Git" From="${RoutineDB}" />
</Configuration>
</Namespace>
</Manifest>
}

}
